#!/usr/bin/env python# -*- coding: utf-8 -*-# Created by spider3 on 2018/7/16# Copyright (c) 2018 spider3. All rights reserved.import pymysqlconnection = pymysql.connect(host='localhost', user='root', password='root', db='feigo_data', port=3306,                                 charset='utf8')def get_no_amap_data():    with connection.cursor() as cursor:        get_id_sql = 'SELECT `id`,`address` FROM `feigo_shops` WHERE `region_id_2`=440300 AND `amap_id` = "0"'        cursor.execute(get_id_sql)        shop_ids = cursor.fetchall()        # shop_ids = [shop_id[0] for shop_id in shop_ids]        print(shop_ids)        return shop_idsdef get_other_region_short_name():    with connection.cursor() as cursor:        get_id_sql = 'SELECT `short_name` FROM `feigo_regions` WHERE `merger_name` NOT LIKE "%深圳市%"'        cursor.execute(get_id_sql)        short_names = cursor.fetchall()        short_names = [short_name[0] for short_name in short_names if short_name[0]]        short_names = [short_name.replace("街道", "").split("(")[0] for short_name in short_names]        print("非深圳名字\n", short_names)        return short_namesdef get_region_short_name():    """    获取深圳的地区名字    :return:    """    with connection.cursor() as cursor:        get_id_sql = 'SELECT `short_name` FROM `feigo_regions` WHERE `merger_name` LIKE "%深圳市%"'        cursor.execute(get_id_sql)        short_names = cursor.fetchall()        short_names = [short_name[0] for short_name in short_names if short_name[0]]        short_names = [short_name.replace("街道", "").split("(")[0] for short_name in short_names]        print("获取深圳的地区名字")        print(short_names)        short_names.extend(["公明", "后海", "南光", "粤海", "沙嘴", "科园", "流塘", "象山", "龙翔", "福明"])        return short_namesdef check_address_is_not_in(id_and_addresses, short_names):    print("----------------------")    false_id_address = []    for id_and_address in id_and_addresses:        for short_name in short_names:            if short_name in id_and_address[1]:                false_id_address.append(id_and_address)                break    print(false_id_address)    print("---------------------")    return false_id_addressdef check_address_is_in(id_and_addresses, short_names):    id_address = []    print("++++++++++++++++++++++++++++++++++++++")    print(short_names)    for id_and_address in id_and_addresses:        is_in = False        for short_name in short_names:            if short_name in id_and_address[1]:                is_in = True        if not is_in:            id_address.append(id_and_address)    print(id_address)    print("++++++++++++++++++++++++++++++++++++++")    print(len(id_address))    return id_addressdef main():    id_and_addresses = get_no_amap_data()    no_short_names = get_other_region_short_name()    short_names = get_region_short_name()    false_id_address = check_address_is_not_in(id_and_addresses, no_short_names)    print(len(false_id_address))    check_address_is_in(false_id_address, short_names)if __name__ == '__main__':    main()