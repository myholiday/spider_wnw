#!/usr/bin/env python# -*- coding: utf-8 -*-# Created by spider3 on 2018/3/9# Copyright (c) 2018 spider3. All rights reserved.import jsonimport requestsfrom pymongo import MongoClientimport loggingfrom datetime import datetime# 高德地图poi: http://lbs.amap.com/api/webservice/guide/api/search/class Amap_spider():    def __init__(self, type_id, city):        """        :param type_id:  查询POI类型,即分类,可查询poi类型编码excel        :param city:   查询城市，可选值：城市中文、中文全拼、citycode、adcode        """        self.init_log()        self.type_id = type_id        self.city = city        self.url = "http://restapi.amap.com/v3/place/text"        self.data = {            "key": "5f2e9ed810bca7a99abc98f3808afce5",            "keywords": "家具",            "types": type_id,  # 查询POI类型            "city": city,  # 查询城市            "citylimit": True,  # 仅返回指定城市数据            "children": 1,            "offset": 20,            "page": 1,  # 最大翻页数100            "extensions": "all",        }        self.page = 1        self.total_count = 0.1  # 记录总条数        self.get_data(1)  # 初始化页码数        self.page_num = self.total_count // 20 + 2 if self.total_count % 20 != 0 else self.total_count // 20 + 1        # 链接MongoDB数据库        conn = MongoClient("localhost", 27017)        db = conn.mydb  # 连接mydb数据库，没有则自动创建        self.my_set = db.ampa_set  # 使用ampa_set集合，没有则自动创建        # 先打印信息        text = "初始化成功{}，{}，共有{}页，共{}条数据".format(city, type_id, self.page_num - 1, self.total_count)        print(text)        self.logger.info(text)    def get_data(self, page=1):        """        输入页码,获取并储存每一天数据        :param page: 页码        :return:        """        print("正在解析,{},{},页码：{}".format(self.city, self.type_id, page))        self.data["page"] = page        response = requests.get(url=self.url, params=self.data)        j_response = json.loads(response.text)        if self.total_count == 0.1:            self.total_count = int(j_response["count"])  # 如果是第一次爬取新的地方，则赋值总条数            return        self.save_to_mongo(j_response["pois"])    def save_to_mongo(self, pois):        """        将列表中的每条数据更新加入数据库        :param pois: [{}{}{}]        :return: None        """        for poi in pois:            id = poi["id"]            # 更新每一条数据            # self.my_set.update({"id": id}, {"$set": poi}, upsert=True)            self.my_set.insert(poi)        print("储存了：", len(pois), "条数据")        return None    def init_log(self):        """        初始化logger        :return:        """        self.logger = logging.getLogger()        fh = logging.FileHandler(R"F:\tmp\log.txt")  # 设置保存文件路径        fh.setLevel(logging.DEBUG)  # 设置等级        # 设置输出格式        formatter = logging.Formatter("%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s")        fh.setFormatter(formatter)        self.logger.addHandler(fh)    def get_each_data(self):        for i in range(1, self.page_num):            self.get_data(i)def main():    ampa = Amap_spider("060600", "霞山区")    ampa.get_each_data()if __name__ == '__main__':    main()